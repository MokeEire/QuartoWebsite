{
  "hash": "a1b0741e0603683ce52e55d30c4cfa13",
  "result": {
    "markdown": "---\ntitle: \"Parsing XML with R\"\nsubtitle: \"Untangling congressional legislative data\"\ndate: \"2022-07-14\"\ncategories: \n  - data\n  - governance\n  - R\nformat: \n  html: \n    toc: true\n    code-link: true\n    code-fold: show\n    code-tools: true\n    comments:\n      hypothesis: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\nData comes in many forms. You've probably used data formats like Excel spreadsheets, text files, databases and if you're reading this maybe even (e)Xtensible Markup Language, or XML. XML is a storage format designed for flexibly transmitting data[^1] but this flexibility often leads to a bit of a hassle when trying to parse it for use in analytics. This article takes a look at this tricky, but valuable data type, how to use it, and a set of steps for processing XML with R.\n\n[^1]: [Wikipedia](https://en.wikipedia.org/wiki/XML) for the curious. Don't miss the drama about Microsoft's \"vociferous protests\" as one of the co-editors started working with Netscape.\n\n::: {.callout-tip appearance=\"simple\"}\n## What you'll learn:\n\n-   Load and parse XML files in R using the `{XML}` and `{xml2}` packages\n\n-   Explore the structure of XML documents\n\n-   List, map, and flatten your data into a tabular format\n:::\n\nThe impetus for this post was the US government's congressional data. The US Government Publishing Office collects and provides records of all the bills that pass through congress, including the committees which consider the bill, the legislators who sponsor, or co-sponsor the bill, and any action taken on the bill while it is in congress e.g. votes and debates. I'm curious to see what kind of insights we can glean about the legislative structures and context of decision-making that determines the laws that are passed (or not). More to come on this in the future.\n\nAs always, the first step of data analysis is to check if any documentation exists and thankfully [govinfo](https://www.govinfo.gov/) has provided some [guidance](https://github.com/usgpo/bill-status/blob/main/BILLSTATUS-XML_User_User-Guide.md) on how to interpret the data and where its limitations are.\n\nTo follow along, you can download the sample XML file [here](https://www.govinfo.gov/bulkdata/BILLSTATUS/117/hr/BILLSTATUS-117hr391.xml \"HR-391: Global Health Security Act of 2021\"). The sample bill (chosen because its contents are instructional for data cleaning) is [*HR-391: Global Health Security Act of 2021*](https://www.govinfo.gov/app/details/BILLS-117hr391rfs)*.*\n\n# What is XML?\n\nIt is a format designed to work with any \"arbitrary\" structure. For example, an action taken on a bill in our data looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(example_node = xml_find_first(bill_xml_file, \"bill/actions/item\")) %>% \n  xmlParse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\"?>\n<item>\n  <actionDate>2021-07-12</actionDate>\n  <committees>\n    <item>\n      <systemCode>ssfr00</systemCode>\n      <name>Foreign Relations Committee</name>\n    </item>\n  </committees>\n  <links/>\n  <sourceSystem>\n    <code>0</code>\n    <name>Senate</name>\n  </sourceSystem>\n  <text>Received in the Senate and Read twice and referred to the Committee on Foreign Relations.</text>\n  <type>IntroReferral</type>\n</item>\n \n```\n:::\n:::\n\n\nWhere this action `<item>` node is one of many actions taken on a `<bill>` node (its *parent* node), while an `<item>` may also contain multiple committee `<item>` nodes (its *children*). To have a table at this level of detail could end up being hundreds of rows per bill, making this flexible structure in XML more helpful.\n\n# Read XML data with R\n\nHere are the tools we'll be using. Between `{XML}` and `{xml2}` there are numerous ways to load in and process XML data. I generally prefer `{xml2}` but I suggest looking through the packages' documentation to find the right function for your task. `{purrr}` helps us parse and flatten the data into tabular form once we've converted it to a list.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlibrary(XML)\nlibrary(xml2)\nlibrary(purrr)\n\n\nbill_xml = read_xml(\"https://www.govinfo.gov/bulkdata/BILLSTATUS/117/hr/BILLSTATUS-117hr391.xml\")\n```\n:::\n\n\nRead in the file with `read_xml()` , which returns an `xml_document`[^2] object.\n\n[^2]: `xml_document` is one of the \"key classes\" used in the `{xml2}` library, the others being `xml_node` (a single node), and `xml_nodeset` (a set of nodes).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Look at the xml_document's contents\nxml_contents(bill_xml)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (2)}\n[1] <bill>\\n  <billNumber>391</billNumber>\\n  <createDate>2021-01-22T08:12:10 ...\n[2] <dublinCore xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\\n  <dc:format>te ...\n```\n:::\n:::\n\n\nThe `<dublinCore>` element is a document metadata identifier[^3] and while very useful in its own right, it isn't relevant for our purposes. In this case it's actually more useful to look at the `<bill>` child node using `xml_child()`.\n\n[^3]: And sadly not an Irish metal music genre.\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap  code-fold=\"show\"}\n# Return child nodes named bill\n(bill_node = xml_child(bill_xml, \"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_node}\n<bill>\n [1] <billNumber>391</billNumber>\n [2] <createDate>2021-01-22T08:12:10Z</createDate>\n [3] <updateDate>2022-02-09T12:37:52Z</updateDate>\n [4] <originChamber>House</originChamber>\n [5] <billType>HR</billType>\n [6] <introducedDate>2021-01-21</introducedDate>\n [7] <congress>117</congress>\n [8] <constitutionalAuthorityStatementText><![CDATA[<pre>[Congressional Recor ...\n [9] <recordedVotes>\\n  <recordedVote>\\n    <rollNumber>188</rollNumber>\\n    ...\n[10] <committees>\\n  <billCommittees>\\n    <item>\\n      <systemCode>ssfr00</ ...\n[11] <committeeReports/>\n[12] <relatedBills/>\n[13] <actions>\\n  <item>\\n    <actionDate>2021-07-12</actionDate>\\n    <commi ...\n[14] <sponsors>\\n  <item>\\n    <bioguideId>C001078</bioguideId>\\n    <fullNam ...\n[15] <cosponsors>\\n  <item>\\n    <bioguideId>C000266</bioguideId>\\n    <fullN ...\n[16] <cboCostEstimates>\\n  <item>\\n    <pubDate>2021-05-11T15:11:11Z</pubDate ...\n[17] <laws/>\n[18] <notes/>\n[19] <policyArea>\\n  <name>International Affairs</name>\\n</policyArea>\n[20] <subjects>\\n  <billSubjects>\\n    <legislativeSubjects>\\n      <item>\\n  ...\n...\n```\n:::\n:::\n\n\nTo convert this data from XML to a dataframe we need to deal with the nodes which have nested data. This requires a little thought about what data is relevant to your question and what [level of observation](https://en.wikipedia.org/wiki/Unit_of_observation) you want to use.\n\nIt is also usually a good idea to try the most direct approach first, which is the aptly named `xmlToDataFrame()`. When you're working with both the `{XML}` and `{xml2}` libraries, it is important to note that their functions often rely on different object types. In the case of `xmlToDataFrame()`, it does not take `{xml_document}` or `{xml_node}` objects. If you try to use them, you'll see an error like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmlToDataFrame(bill_xml)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in (function (classes, fdef, mtable) : unable to find an inherited method for function 'xmlToDataFrame' for signature '\"xml_document\", \"missing\", \"missing\", \"missing\", \"missing\"'\n```\n:::\n:::\n\n\nInstead you'll need to use `xmlParse()` which creates an XMLInternalDocument/XMLAbstractDocument object. Because we have the document metadata node which we don't want to parse, we need to use `getNodeSet(., [path =] \"//bill\")` to find only nodes under `<bill>`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First you need to use the xmlParse function\nbill_xml_parse = xmlParse(bill_xml)\n\n# You can wrap a variable assignment in ( ) to print it, \n# or in this case pass it to another function via the pipe %>% \n( bill_xml_df_attempt = xmlToDataFrame(getNodeSet(bill_xml_parse, \"//bill\")) ) %>% \n  # View the dataframe structure\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.code-block-h}\nRows: 1\nColumns: 28\n$ billNumber                           <chr> \"391\"\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\"\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\"\n$ originChamber                        <chr> \"House\"\n$ billType                             <chr> \"HR\"\n$ introducedDate                       <chr> \"2021-01-21\"\n$ congress                             <chr> \"117\"\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ recordedVotes                        <chr> \"188https://clerk.house.gov/evs/2…\n$ committees                           <chr> \"ssfr00Foreign Relations Committe…\n$ committeeReports                     <chr> \"\"\n$ relatedBills                         <chr> \"\"\n$ actions                              <chr> \"2021-07-12ssfr00Foreign Relation…\n$ sponsors                             <chr> \"C001078Rep. Connolly, Gerald E. …\n$ cosponsors                           <chr> \"C000266Rep. Chabot, Steve [R-OH-…\n$ cboCostEstimates                     <chr> \"2021-05-11T15:11:11ZH.R. 391, Gl…\n$ laws                                 <chr> \"\"\n$ notes                                <chr> \"\"\n$ policyArea                           <chr> \"International Affairs\"\n$ subjects                             <chr> \"Advisory bodiesAnimal and plant …\n$ summaries                            <chr> \"002021-01-21Introduced in House2…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ titles                               <chr> \"Display TitleGlobal Health Secur…\n$ amendments                           <chr> \"\"\n$ textVersions                         <chr> \"Referred in Senate2021-07-12T04:…\n$ latestAction                         <chr> \"2021-07-12Received in the Senate…\n$ calendarNumbers                      <chr> \"\"\n$ version                              <chr> \"1.0.0\"\n```\n:::\n:::\n\n\nBut notice that a number of fields like `committees`, `actions`, and `sponsors` have had their values combined into a single column. With nested data, you may need to do a little bit more work to get the data into a [tidy data](https://vita.had.co.nz/papers/tidy-data.html) frame, but this approach can work for simpler XML structures. The importance of understanding the structure of your data brings us to one of the cardinal rules of data analysis:\n\n::: {.callout-tip appearance=\"simple\"}\n## Look at your data\n\nIn fact, you could even say *stare* at it. Understanding the structure and contents of your data is essential for designing a solution to consistently process the data.\n:::\n\n# Define your output\n\nAs well as looking at your data, it's also usually helpful to look to your intended output. This determines how to transform the data.\n\n**Example:** I want the congressional data to have one row per bill, with the nested characteristics stored in list columns. This will produce a comprehensive dataset which can easily be subset and transformed to various levels of observation as needed. The end result should look like this:\n\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-6f8691ca702af6905b32\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6f8691ca702af6905b32\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"bill_number\":[\"391\"],\"create_date\":[\"2021-01-22T08:12:10Z\"],\"update_date\":[\"2022-02-09T12:37:52Z\"],\"origin_chamber\":[\"House\"],\"bill_type\":[\"HR\"],\"introduced_date\":[\"2021-01-21T00:00:00Z\"],\"congress\":[\"117\"],\"constitutional_authority_statement_text\":[\"<pre>[Congressional Record Volume 167, Number 17 (Thursday, January 28, 2021)][House]From the Congressional Record Online through the Government Publishing Office [<a href=\\\"https://www.gpo.gov\\\">www.gpo.gov<\\/a>]By Ms. SANCHEZ:H.J. Res. 22.Congress has the power to enact this legislation pursuantto the following:Article 1 Section 8ADDITIONAL SPONSORSUnder clause 7 of rule XII, sponsors were added to public bills andresolutions, as follows:H.R. 28: Mr. Chabot, Mr. Armstrong, Mrs. Fischbach, Mr.Lucas, Mr. Mast, and Mr. Womack.H.R. 40: Mr. Kahele, Ms. Roybal-Allard, Mr. Aguilar, Ms.Waters, Mr. Vela, Mr. Sires, and Mr. Huffman.H.R. 51: Mr. Mrvan and Ms. Davids of Kansas.H.R. 55: Ms. Ross, Mr. Lynch, Mr. Larsen of Washington, Mr.Thompson of California, Ms. Manning, Ms. Jayapal, Ms. Adams,Mr. Schneider, Mr. Veasey, and Ms. Wild.H.R. 77: Mr. Grothman.H.R. 78: Mr. Smith of New Jersey, Mr. Hice of Georgia, Mr.Bucshon, Mr. Burgess, and Mr. Norman.H.R. 97: Mrs. Hayes, Mr. Welch, Mr. Torres of New York, Mr.Cicilline, and Mr. Danny K. Davis of Illinois.H.R. 147: Mr. Ryan and Mr. Brown.H.R. 197: Mr. Brendan F. Boyle of Pennsylvania and Mr.Hastings.H.R. 217: Mr. Hice of Georgia.H.R. 235: Mr. Meeks and Mr. Torres of New York.H.R. 243: Mr. Armstrong.H.R. 255: Mr. Auchincloss, Mr. DeSaulnier, Mr. Schrader,and Ms. Chu.H.R. 256: Mr. Schrader and Ms. Chu.H.R. 262: Mr. Cicilline and Mr. Torres of New York.H.R. 265: Mr. Veasey.H.R. 275: Mr. Jacobs of New York, Ms. Herrera Beutler, Mr.McCaul, Mr. Joyce of Ohio, Mrs. Bice of Oklahoma, Mr.LaMalfa, Mrs. Steel, Mr. Hill, Mr. Garbarino, Mr. Pfluger,Mr. Gimenez, and Mrs. Cammack.H.R. 279: Mr. Neguse, Mr. Crow, and Mr. DeSaulnier.H.R. 289: Mr. Perry.H.R. 295: Mr. Cloud.H.R. 302: Mr. Costa.H.R. 304: Mr. Raskin, Mr. Lynch, Mr. Carson, Ms. Norton,and Mr. Kilmer.H.R. 305: Ms. Ross, Mr. Kind, and Mr. Michael F. Doyle ofPennsylvania.H.R. 322: Mr. Wilson of South Carolina.H.R. 326: Mr. Costa.H.R. 332: Mr. Stanton and Mrs. Wagner.H.R. 349: Ms. Williams of Georgia, Ms. Brownley, Ms. BluntRochester, and Mrs. Trahan.H.R. 359: Mr. Rodney Davis of Illinois.H.R. 369: Mrs. Hayes and Ms. Schrier.H.R. 377: Mr. Rice of South Carolina and Ms. Herrell.H.R. 378: Mr. Rice of South Carolina and Ms. Herrell.H.R. 384: Mr. Cohen, Ms. Mace, Mr. Huffman, Mr. Hastings,and Ms. Eshoo.H.R. 391: Mr. DeSaulnier, Mrs. Napolitano, Ms. Chu, Mr.Harder of California, Mr. Cohen, and Mrs. Fletcher.H.R. 392: Mr. Smith of Washington, Ms. Moore of Wisconsin,Mr. Sablan, and Mr. Sires.H.R. 398: Ms. Herrell.H.R. 407: Mr. Mast.H.R. 421: Ms. Plaskett, Mr. Rush, and Mr. Correa.H.R. 426: Mr. Hagedorn, Mr. Mooney, Mr. Green of Tennessee,Mr. Norman, and Mr. Davidson.H.R. 447: Mr. DeSaulnier, Mr. Courtney, Ms. Adams, Mrs.McBath, Mr. Kinzinger, Mr. Castro of Texas, Mr. Stivers, Mr.Morelle, Mr. Smith of Washington, Mr. Khanna, Mr. Sarbanes,Ms. Norton, Ms. Stevens, Mr. Grijalva, Ms. Blunt Rochester,Mr. Cardenas, Ms. Schakowsky, Ms. Jackson Lee, Mr.Krishnamoorthi, Mr. Danny K. Davis of Illinois, Mrs. Demings,Mr. Foster, Ms. Houlahan, Mr. Moulton, Mr. Kilmer, Ms. Meng,Mr. Gallego, Mr. Brown, Mr. Suozzi, Mr. Garamendi, Mr.Neguse, Ms. McCollum, Mr. Kildee, Mrs. Beatty, Mr. Carbajal,Ms. Craig, Mr. Trone, Ms. Waters, Mr. Casten, Mrs. Bustos,Mr. Langevin, Mr. Sires, Mr. Kahele, Mr. Ryan, Ms. Underwood,Mr. Stanton, Mr. Carson, Mr. David Scott of Georgia, Ms. Leeof California, Mrs. Dingell, Mrs. Axne, Mr. Horsford, and Mr.Lamb.H.R. 448: Mr. Jones.H.R. 449: Mrs. Miller of Illinois.H.R. 450: Mrs. Miller of Illinois.H.R. 452: Mr. Nunes and Mr. Joyce of Ohio.H.R. 465: Mr. Costa and Mr. Valadao.H.R. 471: Mr. Buck, Ms. Mace, Mr. Perry, Mr. Wright, Mr.Babin, Mr. Norman, and Mr. Gibbs.H.R. 472: Mr. Feenstra.H.R. 485: Mrs. Hayes, Mr. Castro of Texas, Ms. Wild, Mr.Takano, Mr. Morelle, Mrs. Trahan, Mr. Levin of Michigan, andMs. Adams.H.R. 488: Mr. Newhouse, Mr. Stewart,[...][Page H254]<\\/pre>\"],\"title\":[\"Global Health Security Act of 2021\"],\"version\":[\"1.0.0\"],\"latest_action_action_date\":[\"2021-07-12T00:00:00Z\"],\"latest_action_text\":[\"Received in the Senate and Read twice and referred to the Committee on Foreign Relations.\"]},\"columns\":[{\"accessor\":\"bill_number\",\"name\":\"bill_number\",\"type\":\"character\",\"width\":100},{\"accessor\":\"create_date\",\"name\":\"create_date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":100},{\"accessor\":\"update_date\",\"name\":\"update_date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":100},{\"accessor\":\"origin_chamber\",\"name\":\"origin_chamber\",\"type\":\"character\",\"show\":false},{\"accessor\":\"bill_type\",\"name\":\"bill_type\",\"type\":\"character\",\"width\":80},{\"accessor\":\"introduced_date\",\"name\":\"introduced_date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":135},{\"accessor\":\"congress\",\"name\":\"congress\",\"type\":\"character\",\"width\":80},{\"accessor\":\"constitutional_authority_statement_text\",\"name\":\"constitutional_authority_statement_text\",\"type\":\"character\",\"show\":false},{\"accessor\":\"title\",\"name\":\"title\",\"type\":\"character\",\"minWidth\":180},{\"accessor\":\"version\",\"name\":\"version\",\"type\":\"character\",\"show\":false,\"width\":80},{\"accessor\":\"latest_action_action_date\",\"name\":\"action_date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":115},{\"accessor\":\"latest_action_text\",\"name\":\"action_text\",\"type\":\"character\",\"minWidth\":180,\"maxWidth\":240}],\"columnGroups\":[{\"name\":\"Latest Action\",\"columns\":[\"latest_action_action_date\",\"latest_action_text\"]}],\"resizable\":true,\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"compact\":true,\"nowrap\":true,\"theme\":{\"color\":\"#474d4d\",\"backgroundColor\":\"#FFFFFF\",\"borderColor\":\"#dddddd\",\"borderWidth\":\"1px\",\"stripedColor\":\"#dddddd\",\"highlightColor\":\"#f0f0f0\",\"cellPadding\":\"8px 12px\",\"style\":{\"padding\":\"16px 8px\"},\"tableStyle\":{\"fontSize\":14,\"borderBottom\":\"3px solid #222222\",\"fontFamily\":\"Noto Sans, sans-serif\"},\"headerStyle\":{\"borderWidth\":\"3px\",\"paddingTop\":\"12px\",\"verticalAlign\":\"bottom\",\"textAlign\":\"bottom\",\"background\":\"#FFFFFF\",\"textTransform\":\"uppercase\",\"borderColor\":\"#474d4d\",\"color\":\"#051414\",\"&:hover\":{\"background\":\"#dddddd\"},\"&[aria-sort='ascending'], &[aria-sort='descending']\":{\"background\":\"#5b5e5f\",\"color\":\"#FFFFFF\"},\"borderColor.1\":\"#333\",\"fontSize\":12,\"fontFamily\":\"Heebo Light, sans-serif\"},\"groupHeaderStyle\":{\"&:not(:empty)\":{\"paddingBottom\":\"3px\",\"verticalAlign\":\"bottom\",\"textAlign\":\"bottom\",\"backgroundColor\":\"#FFFFFF\",\"textTransform\":\"uppercase\",\"fontSize\":12,\"color\":\"#474d4d\"}},\"rowSelectedStyle\":{\"backgroundColor\":\"#dddddd\"},\"inputStyle\":{\"backgroundColor\":\"#FFFFFF\",\"color\":\"#474d4d\"},\"searchInputStyle\":{\"textTransform\":\"uppercase\",\"color\":\"#474d4d\",\"fontSize\":\"14px\"},\"paginationStyle\":{\"textTransform\":\"uppercase\",\"fontSize\":\"14px\"},\"pageButtonStyle\":{\"textTransform\":\"uppercase\",\"fontSize\":\"14px\"}},\"dataKey\":\"4b76f59ceb6630e1b6464cd70c3bfbb4\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWith the following list columns (among others):\n\n::: panel-tabset\n## Committees\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ : tibble [2 × 6] (S3: tbl_df/tbl/data.frame)\n  ..$ committee_system_code  : chr [1:2] \"ssfr00\" \"hsfa00\"\n  ..$ committee_name         : chr [1:2] \"Foreign Relations Committee\" \"Foreign Affairs Committee\"\n  ..$ committee_chamber      : chr [1:2] \"Senate\" \"House\"\n  ..$ committee_type         : chr [1:2] \"Standing\" \"Standing\"\n  ..$ committee_activities   :List of 2\n  ..$ subcommittee_activities:List of 2\n```\n:::\n:::\n\n\n## Votes\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ : tibble [1 × 9] (S3: tbl_df/tbl/data.frame)\n  ..$ roll_number     : chr \"188\"\n  ..$ url             : chr \"https://clerk.house.gov/evs/2021/roll188.xml\"\n  ..$ full_action_name: chr \"Final Passage Under Suspension of the Rules Results\"\n  ..$ chamber         : chr \"House\"\n  ..$ congress        : chr \"117\"\n  ..$ date            : chr \"2021-06-28T23:46:02Z\"\n  ..$ session_number  : chr \"1\"\n  ..$ vote_roll       :List of 1\n  ..$ roll_found      : logi FALSE\n```\n:::\n:::\n\n\n## Actions\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ : tibble [14 × 9] (S3: tbl_df/tbl/data.frame)\n  ..$ action_date                 : Date[1:14], format: \"2021-07-12\" \"2021-06-28\" ...\n  ..$ action_committee_system_code: chr [1:14] \"ssfr00\" NA NA NA ...\n  ..$ action_committee_name       : chr [1:14] \"Foreign Relations Committee\" NA NA NA ...\n  ..$ action_source_code          : chr [1:14] \"0\" \"2\" \"2\" \"9\" ...\n  ..$ action_source_name          : chr [1:14] \"Senate\" \"House floor actions\" \"House floor actions\" \"Library of Congress\" ...\n  ..$ action_text                 : chr [1:14] \"Received in the Senate and Read twice and referred to the Committee on Foreign Relations.\" \"Motion to reconsider laid on the table Agreed to without objection.\" \"On motion to suspend the rules and pass the bill, as amended Agreed to by the Yeas and Nays: (2/3 required): 30\"| __truncated__ \"Passed/agreed to in House: On motion to suspend the rules and pass the bill, as amended Agreed to by the Yeas a\"| __truncated__ ...\n  ..$ action_type                 : Ord.factor w/ 6 levels \"IntroReferral\"<..: 1 3 3 3 3 3 3 3 3 2 ...\n  ..$ action_time                 : 'hms' num [1:14] NA 19:46:03 19:46:02 19:46:02 ...\n  .. ..- attr(*, \"units\")= chr \"secs\"\n  ..$ action_code                 : chr [1:14] NA \"H38310\" \"H37300\" \"8000\" ...\n```\n:::\n:::\n\n\n## Sponsors\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ : tibble [1 × 11] (S3: tbl_df/tbl/data.frame)\n  ..$ sponsor_bioguide_id            : chr \"C001078\"\n  ..$ sponsor_full_name              : chr \"Rep. Connolly, Gerald E. [D-VA-11]\"\n  ..$ sponsor_first_name             : chr \"Gerald\"\n  ..$ sponsor_middle_name            : chr \"E.\"\n  ..$ sponsor_last_name              : chr \"Connolly\"\n  ..$ sponsor_party                  : chr \"D\"\n  ..$ sponsor_state                  : chr \"VA\"\n  ..$ sponsor_identifiers_lis_id     : chr \"1959\"\n  ..$ sponsor_identifiers_bioguide_id: chr \"C001078\"\n  ..$ sponsor_identifiers_gpo_id     : chr \"8202\"\n  ..$ sponsor_district               : chr \"11\"\n```\n:::\n:::\n\n:::\n\n# Parsing\n\nWith this output in mind and an understanding of the current data structure, we can break the parsing process down into two categories - the simple, and the not-so-simple.\n\nIn general, the process is two steps:\n\n1.  Convert XML to a list with `as_list()`\n2.  Flatten the list to a data frame using a combination of functions from `{purrr}`\n    a.  `flatten_dfc()`/`flatten_dfr()` to flatten a list into a data frame by column or row respectively\n\n    b.  `map_dfc()`/`map_dfr()` to apply a function to each element of a list and combine the results as columns or rows in a data frame respectively\n\n## The simple elements\n\nThe simple parts of the data to process are those which are already at the level of observation you want. In our case - at the bill level. These are typically the top-level nodes which only have one piece of data. To select only these nodes we want to select the bill's child nodes which have no further children and are not empty. We can write a function in R like the one below, or use [XPath](https://www.w3schools.com/xml/xml_parser.asp) (or XML Path Language) to identify the nodes we want directly. In the process of writing this, I discovered that using XPath made this \\~5x faster but I include the R function because XPath can be tricky and it may be useful to some.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Function to select singular child nodes from XML node\nxml_singular_nodes = function(xml_node){\n  # Return child nodes of current node\n  child_nodes = xml_children(xml_node)\n  # Select child nodes with 0 children\n  zero_length_child_nodes = child_nodes[xml_length(child_nodes) == 0]\n  \n  # Keep the nodes which are not empty strings\n  keep(zero_length_child_nodes, ~(xml_text(.) != \"\"))\n}\n\n# Using XPath:\nsingular_nodes1 = xml_find_all(bill_xml, \n                                \"//bill/*[count(./*) = 0 and not(string-length(.) = 0)]\")\n\n# Using R function:\nsingular_nodes2 = xml_singular_nodes(bill_node)\n\n# Check they are the same\n# all.equal(singular_nodes1, singular_nodes2)\n\n# Use the first one \nsingular_nodes = singular_nodes1\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### XML =\\> List\n\nThe first step is to convert the XML to a list using `as_list()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(singular_list = as_list(singular_nodes)) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 10\n $ :List of 1\n  ..$ : chr \"391\"\n $ :List of 1\n  ..$ : chr \"2021-01-22T08:12:10Z\"\n $ :List of 1\n  ..$ : chr \"2022-02-09T12:37:52Z\"\n $ :List of 1\n  ..$ : chr \"House\"\n $ :List of 1\n  ..$ : chr \"HR\"\n $ :List of 1\n  ..$ : chr \"2021-01-21\"\n $ :List of 1\n  ..$ : chr \"117\"\n $ :List of 1\n  ..$ : chr \"<pre>[Congressional Record Volume 167, Number 17 (Thursday, January 28, 2021)][House]From the Congressional Rec\"| __truncated__\n $ :List of 1\n  ..$ : chr \"Global Health Security Act of 2021\"\n $ :List of 1\n  ..$ : chr \"1.0.0\"\n```\n:::\n:::\n\n\nNote that we didn't retain the element names so we need to assign them ourselves.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(singular_list_named = setNames(singular_list, xml_name(singular_nodes))) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 10\n $ billNumber                          :List of 1\n  ..$ : chr \"391\"\n $ createDate                          :List of 1\n  ..$ : chr \"2021-01-22T08:12:10Z\"\n $ updateDate                          :List of 1\n  ..$ : chr \"2022-02-09T12:37:52Z\"\n $ originChamber                       :List of 1\n  ..$ : chr \"House\"\n $ billType                            :List of 1\n  ..$ : chr \"HR\"\n $ introducedDate                      :List of 1\n  ..$ : chr \"2021-01-21\"\n $ congress                            :List of 1\n  ..$ : chr \"117\"\n $ constitutionalAuthorityStatementText:List of 1\n  ..$ : chr \"<pre>[Congressional Record Volume 167, Number 17 (Thursday, January 28, 2021)][House]From the Congressional Rec\"| __truncated__\n $ title                               :List of 1\n  ..$ : chr \"Global Health Security Act of 2021\"\n $ version                             :List of 1\n  ..$ : chr \"1.0.0\"\n```\n:::\n:::\n\n\n### List =\\> Dataframe\n\nLastly, using purrr's `flatten_dfc()` we can flatten each list element into a **d**ata**f**rame **c**olumn.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(bill_df = flatten_dfc(singular_list_named)) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 10\n$ billNumber                           <chr> \"391\"\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\"\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\"\n$ originChamber                        <chr> \"House\"\n$ billType                             <chr> \"HR\"\n$ introducedDate                       <chr> \"2021-01-21\"\n$ congress                             <chr> \"117\"\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\"\n```\n:::\n:::\n\n\nOr in table form:\n\n\n::: {.cell .column-page}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0cb7b647f896b581193f\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0cb7b647f896b581193f\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"billNumber\":[\"391\"],\"createDate\":[\"2021-01-22T08:12:10Z\"],\"updateDate\":[\"2022-02-09T12:37:52Z\"],\"originChamber\":[\"House\"],\"billType\":[\"HR\"],\"introducedDate\":[\"2021-01-21\"],\"congress\":[\"117\"],\"constitutionalAuthorityStatementText\":[\"<pre>[Congressional Record Volume 167, Number 17 (Thursday, January 28, 2021)][House]From the Congressional Record Online through the Government Publishing Office [<a href=\\\"https://www.gpo.gov\\\">www.gpo.gov<\\/a>]By Ms. SANCHEZ:H.J. Res. 22.Congress has the power to enact this legislation pursuantto the following:Article 1 Section 8ADDITIONAL SPONSORSUnder clause 7 of rule XII, sponsors were added to public bills andresolutions, as follows:H.R. 28: Mr. Chabot, Mr. Armstrong, Mrs. Fischbach, Mr.Lucas, Mr. Mast, and Mr. Womack.H.R. 40: Mr. Kahele, Ms. Roybal-Allard, Mr. Aguilar, Ms.Waters, Mr. Vela, Mr. Sires, and Mr. Huffman.H.R. 51: Mr. Mrvan and Ms. Davids of Kansas.H.R. 55: Ms. Ross, Mr. Lynch, Mr. Larsen of Washington, Mr.Thompson of California, Ms. Manning, Ms. Jayapal, Ms. Adams,Mr. Schneider, Mr. Veasey, and Ms. Wild.H.R. 77: Mr. Grothman.H.R. 78: Mr. Smith of New Jersey, Mr. Hice of Georgia, Mr.Bucshon, Mr. Burgess, and Mr. Norman.H.R. 97: Mrs. Hayes, Mr. Welch, Mr. Torres of New York, Mr.Cicilline, and Mr. Danny K. Davis of Illinois.H.R. 147: Mr. Ryan and Mr. Brown.H.R. 197: Mr. Brendan F. Boyle of Pennsylvania and Mr.Hastings.H.R. 217: Mr. Hice of Georgia.H.R. 235: Mr. Meeks and Mr. Torres of New York.H.R. 243: Mr. Armstrong.H.R. 255: Mr. Auchincloss, Mr. DeSaulnier, Mr. Schrader,and Ms. Chu.H.R. 256: Mr. Schrader and Ms. Chu.H.R. 262: Mr. Cicilline and Mr. Torres of New York.H.R. 265: Mr. Veasey.H.R. 275: Mr. Jacobs of New York, Ms. Herrera Beutler, Mr.McCaul, Mr. Joyce of Ohio, Mrs. Bice of Oklahoma, Mr.LaMalfa, Mrs. Steel, Mr. Hill, Mr. Garbarino, Mr. Pfluger,Mr. Gimenez, and Mrs. Cammack.H.R. 279: Mr. Neguse, Mr. Crow, and Mr. DeSaulnier.H.R. 289: Mr. Perry.H.R. 295: Mr. Cloud.H.R. 302: Mr. Costa.H.R. 304: Mr. Raskin, Mr. Lynch, Mr. Carson, Ms. Norton,and Mr. Kilmer.H.R. 305: Ms. Ross, Mr. Kind, and Mr. Michael F. Doyle ofPennsylvania.H.R. 322: Mr. Wilson of South Carolina.H.R. 326: Mr. Costa.H.R. 332: Mr. Stanton and Mrs. Wagner.H.R. 349: Ms. Williams of Georgia, Ms. Brownley, Ms. BluntRochester, and Mrs. Trahan.H.R. 359: Mr. Rodney Davis of Illinois.H.R. 369: Mrs. Hayes and Ms. Schrier.H.R. 377: Mr. Rice of South Carolina and Ms. Herrell.H.R. 378: Mr. Rice of South Carolina and Ms. Herrell.H.R. 384: Mr. Cohen, Ms. Mace, Mr. Huffman, Mr. Hastings,and Ms. Eshoo.H.R. 391: Mr. DeSaulnier, Mrs. Napolitano, Ms. Chu, Mr.Harder of California, Mr. Cohen, and Mrs. Fletcher.H.R. 392: Mr. Smith of Washington, Ms. Moore of Wisconsin,Mr. Sablan, and Mr. Sires.H.R. 398: Ms. Herrell.H.R. 407: Mr. Mast.H.R. 421: Ms. Plaskett, Mr. Rush, and Mr. Correa.H.R. 426: Mr. Hagedorn, Mr. Mooney, Mr. Green of Tennessee,Mr. Norman, and Mr. Davidson.H.R. 447: Mr. DeSaulnier, Mr. Courtney, Ms. Adams, Mrs.McBath, Mr. Kinzinger, Mr. Castro of Texas, Mr. Stivers, Mr.Morelle, Mr. Smith of Washington, Mr. Khanna, Mr. Sarbanes,Ms. Norton, Ms. Stevens, Mr. Grijalva, Ms. Blunt Rochester,Mr. Cardenas, Ms. Schakowsky, Ms. Jackson Lee, Mr.Krishnamoorthi, Mr. Danny K. Davis of Illinois, Mrs. Demings,Mr. Foster, Ms. Houlahan, Mr. Moulton, Mr. Kilmer, Ms. Meng,Mr. Gallego, Mr. Brown, Mr. Suozzi, Mr. Garamendi, Mr.Neguse, Ms. McCollum, Mr. Kildee, Mrs. Beatty, Mr. Carbajal,Ms. Craig, Mr. Trone, Ms. Waters, Mr. Casten, Mrs. Bustos,Mr. Langevin, Mr. Sires, Mr. Kahele, Mr. Ryan, Ms. Underwood,Mr. Stanton, Mr. Carson, Mr. David Scott of Georgia, Ms. Leeof California, Mrs. Dingell, Mrs. Axne, Mr. Horsford, and Mr.Lamb.H.R. 448: Mr. Jones.H.R. 449: Mrs. Miller of Illinois.H.R. 450: Mrs. Miller of Illinois.H.R. 452: Mr. Nunes and Mr. Joyce of Ohio.H.R. 465: Mr. Costa and Mr. Valadao.H.R. 471: Mr. Buck, Ms. Mace, Mr. Perry, Mr. Wright, Mr.Babin, Mr. Norman, and Mr. Gibbs.H.R. 472: Mr. Feenstra.H.R. 485: Mrs. Hayes, Mr. Castro of Texas, Ms. Wild, Mr.Takano, Mr. Morelle, Mrs. Trahan, Mr. Levin of Michigan, andMs. Adams.H.R. 488: Mr. Newhouse, Mr. Stewart,[...][Page H254]<\\/pre>\"],\"title\":[\"Global Health Security Act of 2021\"],\"version\":[\"1.0.0\"]},\"columns\":[{\"accessor\":\"billNumber\",\"name\":\"billNumber\",\"type\":\"character\",\"width\":105},{\"accessor\":\"createDate\",\"name\":\"createDate\",\"type\":\"character\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":100},{\"accessor\":\"updateDate\",\"name\":\"updateDate\",\"type\":\"character\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":100},{\"accessor\":\"originChamber\",\"name\":\"originChamber\",\"type\":\"character\",\"show\":false},{\"accessor\":\"billType\",\"name\":\"billType\",\"type\":\"character\",\"width\":85},{\"accessor\":\"introducedDate\",\"name\":\"introducedDate\",\"type\":\"character\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}},\"width\":120},{\"accessor\":\"congress\",\"name\":\"congress\",\"type\":\"character\",\"width\":90},{\"accessor\":\"constitutionalAuthorityStatementText\",\"name\":\"constitutionalAuthorityStatementText\",\"type\":\"character\",\"show\":false},{\"accessor\":\"title\",\"name\":\"title\",\"type\":\"character\",\"minWidth\":180},{\"accessor\":\"version\",\"name\":\"version\",\"type\":\"character\",\"show\":false,\"width\":80}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"theme\":{\"color\":\"#474d4d\",\"backgroundColor\":\"#FFFFFF\",\"borderColor\":\"#dddddd\",\"borderWidth\":\"1px\",\"stripedColor\":\"#dddddd\",\"highlightColor\":\"#f0f0f0\",\"cellPadding\":\"8px 12px\",\"style\":{\"padding\":\"16px 8px\"},\"tableStyle\":{\"fontSize\":14,\"borderBottom\":\"3px solid #222222\",\"fontFamily\":\"Noto Sans, sans-serif\"},\"headerStyle\":{\"borderWidth\":\"3px\",\"paddingTop\":\"12px\",\"verticalAlign\":\"bottom\",\"textAlign\":\"bottom\",\"background\":\"#FFFFFF\",\"textTransform\":\"uppercase\",\"borderColor\":\"#474d4d\",\"color\":\"#051414\",\"&:hover\":{\"background\":\"#dddddd\"},\"&[aria-sort='ascending'], &[aria-sort='descending']\":{\"background\":\"#5b5e5f\",\"color\":\"#FFFFFF\"},\"borderColor.1\":\"#333\",\"fontSize\":12,\"fontFamily\":\"Heebo Light, sans-serif\"},\"groupHeaderStyle\":{\"&:not(:empty)\":{\"paddingBottom\":\"3px\",\"verticalAlign\":\"bottom\",\"textAlign\":\"bottom\",\"backgroundColor\":\"#FFFFFF\",\"textTransform\":\"uppercase\",\"fontSize\":12,\"color\":\"#474d4d\"}},\"rowSelectedStyle\":{\"backgroundColor\":\"#dddddd\"},\"inputStyle\":{\"backgroundColor\":\"#FFFFFF\",\"color\":\"#474d4d\"},\"searchInputStyle\":{\"textTransform\":\"uppercase\",\"color\":\"#474d4d\",\"fontSize\":\"14px\"},\"paginationStyle\":{\"textTransform\":\"uppercase\",\"fontSize\":\"14px\"},\"pageButtonStyle\":{\"textTransform\":\"uppercase\",\"fontSize\":\"14px\"}},\"dataKey\":\"2a124a35ba7bcd958c473a8f8914c0f7\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nOur dataframe includes the bill title, when it was introduced, what type of bill it is, and which congress introduced it.\n\n## The not-so-simple elements\n\nTo combine nested data like that of actions and votes, we will use the same steps as before, tailored to each element's data structure. For more complex cases, I would implore you to write functions[^4]. They can make your code more reliable, easier to debug, and they make you think critically about how you are handling data.\n\n[^4]: [How to Write a Function in R](https://www.earthdatascience.org/courses/earth-analytics/automate-science-workflows/write-function-r-programming/) is a good place to start learning about writing functions.\n\nThis is where the majority of the legwork is so if you can comfortably filter out some data[^5], now's a good time. There's no point spending an hour trying to process one particularly difficult bit of information only to realize it isn't useful to you anyway.\n\n[^5]: But do yourself a favour and write it down somewhere - comment it in the code, tell your colleagues or collaborators, put it on a particularly strong post it, whatever works.\n\n### Actions\n\nThe actions node has an `<item>` child node for each congressional action taken for a bill, such as being introduced, sent to a committee, debated on the floor, etc.\n\nBelow is an example of a single action element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(actions_xml = xml_find_all(bill_node, \"actions/item\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (14)}\n [1] <item>\\n  <actionDate>2021-07-12</actionDate>\\n  <committees>\\n    <item ...\n [2] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:03</a ...\n [3] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:02</a ...\n [4] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:02</a ...\n [5] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:24:39</a ...\n [6] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:20:02</a ...\n [7] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:31</a ...\n [8] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:26</a ...\n [9] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:13</a ...\n[10] <item>\\n  <actionDate>2021-03-25</actionDate>\\n  <committees>\\n    <item ...\n[11] <item>\\n  <actionDate>2021-03-25</actionDate>\\n  <committees>\\n    <item ...\n[12] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Refer ...\n[13] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Intro ...\n[14] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Intro ...\n```\n:::\n\n```{.r .cell-code}\n# Look at first action\nxml_contents(actions_xml[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (6)}\n[1] <actionDate>2021-07-12</actionDate>\n[2] <committees>\\n  <item>\\n    <systemCode>ssfr00</systemCode>\\n    <name>Fo ...\n[3] <links/>\n[4] <sourceSystem>\\n  <code>0</code>\\n  <name>Senate</name>\\n</sourceSystem>\n[5] <text>Received in the Senate and Read twice and referred to the Committee ...\n[6] <type>IntroReferral</type>\n```\n:::\n:::\n\n\nJust as before, we use `as_list()` to convert the `{xml_nodeset}` to a list.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nactions_list = as_list(actions_xml)\n\n# Look at first action\nglimpse(actions_list[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 6\n $ actionDate  :List of 1\n  ..$ : chr \"2021-07-12\"\n $ committees  :List of 1\n  ..$ item:List of 2\n  .. ..$ systemCode:List of 1\n  .. ..$ name      :List of 1\n $ links       : list()\n $ sourceSystem:List of 2\n  ..$ code:List of 1\n  .. ..$ : chr \"0\"\n  ..$ name:List of 1\n  .. ..$ : chr \"Senate\"\n $ text        :List of 1\n  ..$ : chr \"Received in the Senate and Read twice and referred to the Committee on Foreign Relations.\"\n $ type        :List of 1\n  ..$ : chr \"IntroReferral\"\n```\n:::\n:::\n\n\nIn the individual action container, we can see we have the type, text, and date of the action, a list of committees related to the action, and some elements which are singular and some which are not. To deal with this, we can write a function (or set of functions) like the ones below to process an action.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Helper function: flatten_dfc_rename\n# flatten a list to dataframe and \n# rename the columns with a given prefix\nflatten_dfc_rename = function(list_to_flatten, \n                          name_prefix = \"prefix\"){\n  rename_with(\n    .data = flatten_dfc(list_to_flatten), \n    .fn = ~str_c(name_prefix, \"_\", .),\n    # Exclude columns which already start with the prefix\n    .cols = -starts_with(name_prefix)\n    )\n}\n\n# Function: parse_action\n# Parse actions from list to dataframe\nparse_action = function(action){\n  action %>% \n    # Flatten+rename sourceSystem elements\n    map_at(\"sourceSystem\", ~flatten_dfc_rename(.x, \"source\")) %>% \n    # Flatten+rename committees\n    map_at(\"committees\", function(committee){\n      map_dfr(committee, ~flatten_dfc_rename(.x, \"committee\"))\n    }) %>% \n    # Flatten object to dataframe\n    flatten_dfc_rename(., \"action\") %>% \n    # Lastly, clean the names\n    janitor::clean_names()\n}\n\n# Parse the first action\nparse_action(actions_list[[1]]) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 7\n$ action_date                  <chr> \"2021-07-12\"\n$ action_committee_system_code <chr> \"ssfr00\"\n$ action_committee_name        <chr> \"Foreign Relations Committee\"\n$ action_source_code           <chr> \"0\"\n$ action_source_name           <chr> \"Senate\"\n$ action_text                  <chr> \"Received in the Senate and Read twice an…\n$ action_type                  <chr> \"IntroReferral\"\n```\n:::\n:::\n\n\n\n\nUsing the `{purrr}` library's `map_dfr()`, we apply this function to each action and combine the results into **d**ata**f**rame **r**ows.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n(actions_df = map_dfr(actions_list, parse_action)) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14\nColumns: 9\n$ action_date                  <chr> \"2021-07-12\", \"2021-06-28\", \"2021-06-28\",…\n$ action_committee_system_code <chr> \"ssfr00\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ action_committee_name        <chr> \"Foreign Relations Committee\", NA, NA, NA…\n$ action_source_code           <chr> \"0\", \"2\", \"2\", \"9\", \"2\", \"2\", \"2\", \"2\", \"…\n$ action_source_name           <chr> \"Senate\", \"House floor actions\", \"House f…\n$ action_text                  <chr> \"Received in the Senate and Read twice an…\n$ action_type                  <chr> \"IntroReferral\", \"Floor\", \"Floor\", \"Floor…\n$ action_time                  <chr> NA, \"19:46:03\", \"19:46:02\", \"19:46:02\", \"…\n$ action_code                  <chr> NA, \"H38310\", \"H37300\", \"8000\", \"H30000\",…\n```\n:::\n:::\n\n\nNow if you're processing a large amount of data, you may want to be explicit about the data types expected in each column. This is vital when we want to `unnest()` the actions data into an actions-level dataset. You can do this using `type_convert()` , notice the change in column types from the output above.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n(actions_df = type_convert(actions_df,\n                          col_types = cols(\n                            action_date = col_date(), \n                            action_time = col_time(),\n                            action_committee_systemCode = col_character(), \n                            action_committee_name = col_character(), \n                            action_source_code = col_character(),\n                            action_source_name = col_character(),\n                            action_text = col_character(), \n                            action_type = col_character(), \n                            action_code = col_character()\n                            )\n                          )) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14\nColumns: 9\n$ action_date                  <date> 2021-07-12, 2021-06-28, 2021-06-28, 2021…\n$ action_committee_system_code <chr> \"ssfr00\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ action_committee_name        <chr> \"Foreign Relations Committee\", NA, NA, NA…\n$ action_source_code           <chr> \"0\", \"2\", \"2\", \"9\", \"2\", \"2\", \"2\", \"2\", \"…\n$ action_source_name           <chr> \"Senate\", \"House floor actions\", \"House f…\n$ action_text                  <chr> \"Received in the Senate and Read twice an…\n$ action_type                  <chr> \"IntroReferral\", \"Floor\", \"Floor\", \"Floor…\n$ action_time                  <time>       NA, 19:46:03, 19:46:02, 19:46:02, …\n$ action_code                  <chr> NA, \"H38310\", \"H37300\", \"8000\", \"H30000\",…\n```\n:::\n:::\n\n\nTo add these actions data as a list column to `bill_df` we can simply use dollar assignment.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nbill_df$actions = list(actions_df)\n\nglimpse(bill_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 11\n$ billNumber                           <chr> \"391\"\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\"\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\"\n$ originChamber                        <chr> \"House\"\n$ billType                             <chr> \"HR\"\n$ introducedDate                       <chr> \"2021-01-21\"\n$ congress                             <chr> \"117\"\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\"\n$ actions                              <list> [<tbl_df[14 x 9]>]\n```\n:::\n:::\n\n\n\n\n### Votes\n\nVotes are particularly interesting because it provides a more discrete measure of our representatives' behaviour. Individual votes are stored in the `<recordedVotes>` container. We can access child elements in XML using a forward slash (this uses a language called XPATH).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(bill_recorded_vote_nodes = xml_find_all(bill_node, \"recordedVotes/recordedVote\")) %>% \n  xml_contents()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (7)}\n[1] <rollNumber>188</rollNumber>\n[2] <url>https://clerk.house.gov/evs/2021/roll188.xml</url>\n[3] <fullActionName>Final Passage Under Suspension of the Rules Results</full ...\n[4] <chamber>House</chamber>\n[5] <congress>117</congress>\n[6] <date>2021-06-28T23:46:02Z</date>\n[7] <sessionNumber>1</sessionNumber>\n```\n:::\n:::\n\n\nYou may have spotted why votes are interesting elements to parse because inside the `<url>` element we find **another** **XML file**![^6] Before we dive into that can of worms, I'll convert the top-level nodes to a list and flatten it into columns. Note we use `map_dfr()` with `votes_list` because there could be multiple vote objects.\n\n[^6]: ![They heard you like XML](https://c.tenor.com/um2EhyMQyR8AAAAC/xzibit-meme.gif)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Coerce nodes to list\nrecorded_votes_list = as_list(bill_recorded_vote_nodes)\n\n(recorded_votes_df = map_dfr(recorded_votes_list, flatten_dfc)) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 7\n$ rollNumber     <chr> \"188\"\n$ url            <chr> \"https://clerk.house.gov/evs/2021/roll188.xml\"\n$ fullActionName <chr> \"Final Passage Under Suspension of the Rules Results\"\n$ chamber        <chr> \"House\"\n$ congress       <chr> \"117\"\n$ date           <chr> \"2021-06-28T23:46:02Z\"\n$ sessionNumber  <chr> \"1\"\n```\n:::\n:::\n\n\nNow we want to get the vote roll XML file, so we go back to `read_xml()` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_roll_xml = read_xml(recorded_votes_df$url))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_document}\n<rollcall-vote>\n[1] <vote-metadata>\\n  <majority>D</majority>\\n  <congress>117</congress>\\n   ...\n[2] <vote-data>\\n  <recorded-vote>\\n    <legislator name-id=\"A000370\" sort-fi ...\n```\n:::\n:::\n\n\nThere are two main nodes - `<vote-metadata>` and `<vote-data>`. How many elements does each node have and what do the structures for these look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_roll_children = xml_children(vote_roll_xml)) %>% \n  map(xml_contents)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n{xml_nodeset (13)}\n [1] <majority>D</majority>\n [2] <congress>117</congress>\n [3] <session>1st</session>\n [4] <chamber>U.S. House of Representatives</chamber>\n [5] <rollcall-num>188</rollcall-num>\n [6] <legis-num>H R 391</legis-num>\n [7] <vote-question>On Motion to Suspend the Rules and Pass, as Amended</vote ...\n [8] <vote-type>2/3 YEA-AND-NAY</vote-type>\n [9] <vote-result>Passed</vote-result>\n[10] <action-date>28-Jun-2021</action-date>\n[11] <action-time time-etz=\"19:42\">7:42 PM</action-time>\n[12] <vote-desc>Global Health Security Act</vote-desc>\n[13] <vote-totals>\\n  <totals-by-party-header>\\n    <party-header>Party</part ...\n\n[[2]]\n{xml_nodeset (430)}\n [1] <recorded-vote>\\n  <legislator name-id=\"A000370\" sort-field=\"Adams\" unac ...\n [2] <recorded-vote>\\n  <legislator name-id=\"A000055\" sort-field=\"Aderholt\" u ...\n [3] <recorded-vote>\\n  <legislator name-id=\"A000371\" sort-field=\"Aguilar\" un ...\n [4] <recorded-vote>\\n  <legislator name-id=\"A000372\" sort-field=\"Allen\" unac ...\n [5] <recorded-vote>\\n  <legislator name-id=\"A000376\" sort-field=\"Allred\" una ...\n [6] <recorded-vote>\\n  <legislator name-id=\"A000369\" sort-field=\"Amodei\" una ...\n [7] <recorded-vote>\\n  <legislator name-id=\"A000377\" sort-field=\"Armstrong\"  ...\n [8] <recorded-vote>\\n  <legislator name-id=\"A000375\" sort-field=\"Arrington\"  ...\n [9] <recorded-vote>\\n  <legislator name-id=\"A000148\" sort-field=\"Auchincloss ...\n[10] <recorded-vote>\\n  <legislator name-id=\"A000378\" sort-field=\"Axne\" unacc ...\n[11] <recorded-vote>\\n  <legislator name-id=\"B001291\" sort-field=\"Babin\" unac ...\n[12] <recorded-vote>\\n  <legislator name-id=\"B001298\" sort-field=\"Bacon\" unac ...\n[13] <recorded-vote>\\n  <legislator name-id=\"B001307\" sort-field=\"Baird\" unac ...\n[14] <recorded-vote>\\n  <legislator name-id=\"B001306\" sort-field=\"Balderson\"  ...\n[15] <recorded-vote>\\n  <legislator name-id=\"B001299\" sort-field=\"Banks\" unac ...\n[16] <recorded-vote>\\n  <legislator name-id=\"B001282\" sort-field=\"Barr\" unacc ...\n[17] <recorded-vote>\\n  <legislator name-id=\"B001300\" sort-field=\"Barragan\" u ...\n[18] <recorded-vote>\\n  <legislator name-id=\"B001270\" sort-field=\"Bass\" unacc ...\n[19] <recorded-vote>\\n  <legislator name-id=\"B001281\" sort-field=\"Beatty\" una ...\n[20] <recorded-vote>\\n  <legislator name-id=\"B000668\" sort-field=\"Bentz\" unac ...\n...\n```\n:::\n:::\n\n\nOne node contains the aggregated vote information, while `<vote-data>` contains the legislator-level vote data. Let's try to parse the legislator-level data first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_data = xml_find_all(vote_roll_xml, \"vote-data\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (1)}\n[1] <vote-data>\\n  <recorded-vote>\\n    <legislator name-id=\"A000370\" sort-fi ...\n```\n:::\n:::\n\n\nHere is the XML for a single legislator's vote:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxml_child(vote_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_node}\n<recorded-vote>\n[1] <legislator name-id=\"A000370\" sort-field=\"Adams\" unaccented-name=\"Adams\"  ...\n[2] <vote>Yea</vote>\n```\n:::\n:::\n\n\nWith a similar combination of `as_list()` , `flatten_dfr()`, and `unnest()` we can flatten the XML into one row per legislator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_roll_flattened = vote_data %>% \n  as_list() %>% \n  flatten_dfr() %>% \n    unnest(everything()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 430 × 2\n   legislator  vote \n   <chr>       <chr>\n 1 Adams       Yea  \n 2 Aderholt    Nay  \n 3 Aguilar     Yea  \n 4 Allen       Nay  \n 5 Allred      Yea  \n 6 Amodei      Yea  \n 7 Armstrong   Yea  \n 8 Arrington   Nay  \n 9 Auchincloss Yea  \n10 Axne        Yea  \n# … with 420 more rows\n```\n:::\n:::\n\n\nBut we lose all the attributes! And `name-id` looked particularly useful. We'll need to extract the attributes before we flatten the data. Let's take another look at the legislators structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvote_legislators = vote_data %>% \n  xml_find_all(\"recorded-vote\")\n\n(legislators_list = as_list(vote_legislators))[1] %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ :List of 2\n  ..$ legislator:List of 1\n  .. ..$ : chr \"Adams\"\n  .. ..- attr(*, \"name-id\")= chr \"A000370\"\n  .. ..- attr(*, \"sort-field\")= chr \"Adams\"\n  .. ..- attr(*, \"unaccented-name\")= chr \"Adams\"\n  .. ..- attr(*, \"party\")= chr \"D\"\n  .. ..- attr(*, \"state\")= chr \"NC\"\n  .. ..- attr(*, \"role\")= chr \"legislator\"\n  ..$ vote      :List of 1\n  .. ..$ : chr \"Yea\"\n```\n:::\n:::\n\n\nThe legislator element has all the attributes, while the vote element only has a value. We want to extract the attributes only for legislator using `map()` to apply `map_at()` on each legislator element and extract the attributes from each while retaining the value in `vote`. It can often feel like you're getting lost in a list of lists, but with some experimentation you'll be able to find your way back to the surface.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(legislator_vote_df = legislators_list %>% \n    # Modify one level deeper using map_at to target legislator elements\n    map(map_at, \"legislator\", attributes) %>% \n    map_dfr(flatten_dfc))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 430 × 7\n   `name-id` `sort-field` `unaccented-name` party state role       vote \n   <chr>     <chr>        <chr>             <chr> <chr> <chr>      <chr>\n 1 A000370   Adams        Adams             D     NC    legislator Yea  \n 2 A000055   Aderholt     Aderholt          R     AL    legislator Nay  \n 3 A000371   Aguilar      Aguilar           D     CA    legislator Yea  \n 4 A000372   Allen        Allen             R     GA    legislator Nay  \n 5 A000376   Allred       Allred            D     TX    legislator Yea  \n 6 A000369   Amodei       Amodei            R     NV    legislator Yea  \n 7 A000377   Armstrong    Armstrong         R     ND    legislator Yea  \n 8 A000375   Arrington    Arrington         R     TX    legislator Nay  \n 9 A000148   Auchincloss  Auchincloss       D     MA    legislator Yea  \n10 A000378   Axne         Axne              D     IA    legislator Yea  \n# … with 420 more rows\n```\n:::\n:::\n\n\nNow we have a table of legislator voting data! But what about the `<vote-metadata>`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_metadata = xml_find_all(vote_roll_xml, \"vote-metadata\")) %>% \n  xml_contents()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (13)}\n [1] <majority>D</majority>\n [2] <congress>117</congress>\n [3] <session>1st</session>\n [4] <chamber>U.S. House of Representatives</chamber>\n [5] <rollcall-num>188</rollcall-num>\n [6] <legis-num>H R 391</legis-num>\n [7] <vote-question>On Motion to Suspend the Rules and Pass, as Amended</vote ...\n [8] <vote-type>2/3 YEA-AND-NAY</vote-type>\n [9] <vote-result>Passed</vote-result>\n[10] <action-date>28-Jun-2021</action-date>\n[11] <action-time time-etz=\"19:42\">7:42 PM</action-time>\n[12] <vote-desc>Global Health Security Act</vote-desc>\n[13] <vote-totals>\\n  <totals-by-party-header>\\n    <party-header>Party</part ...\n```\n:::\n:::\n\n\nEverything other than the `<vote-totals>` element is singular so we can get that out of the way the same way as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvote_singular_nodes = xml_singular_nodes(vote_metadata)\n\n(vote_df = as_list(vote_singular_nodes) %>% \n  # as_list() doesn't retain element names so we set names ourselves\n  setNames(xml_name(vote_singular_nodes)) %>% \n  flatten_dfc()) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 12\n$ majority        <chr> \"D\"\n$ congress        <chr> \"117\"\n$ session         <chr> \"1st\"\n$ chamber         <chr> \"U.S. House of Representatives\"\n$ `rollcall-num`  <chr> \"188\"\n$ `legis-num`     <chr> \"H R 391\"\n$ `vote-question` <chr> \"On Motion to Suspend the Rules and Pass, as Amended\"\n$ `vote-type`     <chr> \"2/3 YEA-AND-NAY\"\n$ `vote-result`   <chr> \"Passed\"\n$ `action-date`   <chr> \"28-Jun-2021\"\n$ `action-time`   <chr> \"7:42 PM\"\n$ `vote-desc`     <chr> \"Global Health Security Act\"\n```\n:::\n:::\n\n\nThe `<vote-totals>` are a bit of a unique little element, with 3 different types of nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_totals = xml_find_all(vote_metadata, \"vote-totals\")) %>% \n  xml_contents()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (5)}\n[1] <totals-by-party-header>\\n  <party-header>Party</party-header>\\n  <yea-he ...\n[2] <totals-by-party>\\n  <party>Republican</party>\\n  <yea-total>90</yea-tota ...\n[3] <totals-by-party>\\n  <party>Democratic</party>\\n  <yea-total>217</yea-tot ...\n[4] <totals-by-party>\\n  <party>Independent</party>\\n  <yea-total>0</yea-tota ...\n[5] <totals-by-vote>\\n  <total-stub>Totals</total-stub>\\n  <yea-total>307</ye ...\n```\n:::\n:::\n\n\nThis is another opportunity for us to be choosy with our data. The first node is table headers, which we don't need because the elements are tagged anyway. From these, we really only need the `<totals-by-party>` nodes as long as the totals of which agree with `<totals-by-vote>` , which is worth checking.\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\n(vote_totals_by_party = xml_find_all(vote_totals, \"totals-by-party\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (3)}\n[1] <totals-by-party>\\n  <party>Republican</party>\\n  <yea-total>90</yea-tota ...\n[2] <totals-by-party>\\n  <party>Democratic</party>\\n  <yea-total>217</yea-tot ...\n[3] <totals-by-party>\\n  <party>Independent</party>\\n  <yea-total>0</yea-tota ...\n```\n:::\n\n```{.r .cell-code}\n(totals_by_vote = xml_find_all(vote_totals, \"totals-by-vote\")) %>% \n  xml_contents()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (5)}\n[1] <total-stub>Totals</total-stub>\n[2] <yea-total>307</yea-total>\n[3] <nay-total>112</nay-total>\n[4] <present-total>0</present-total>\n[5] <not-voting-total>11</not-voting-total>\n```\n:::\n:::\n\n\nOnce we have our nodeset (which at last are all singular), we use same listing, mapping, and flattening...or *lappening* as absolutely no one calls it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(party_vote_totals_df = as_list(vote_totals_by_party) %>% \n  map_dfr(flatten_dfc) %>% \n    type_convert())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  party       `yea-total` `nay-total` `present-total` `not-voting-total`\n  <chr>             <dbl>       <dbl>           <dbl>              <dbl>\n1 Republican           90         112               0                  9\n2 Democratic          217           0               0                  2\n3 Independent           0           0               0                  0\n```\n:::\n:::\n\n\n\n\nNow that we have all of our vote data wrangled from the thorny grasp of XML, we can put it all together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vote_roll_df = vote_df %>% \n  mutate(legislator_votes = list(legislator_vote_df),\n         party_votes = list(party_vote_totals_df)) %>% \n    janitor::clean_names()) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 14\n$ majority         <chr> \"D\"\n$ congress         <chr> \"117\"\n$ session          <chr> \"1st\"\n$ chamber          <chr> \"U.S. House of Representatives\"\n$ rollcall_num     <chr> \"188\"\n$ legis_num        <chr> \"H R 391\"\n$ vote_question    <chr> \"On Motion to Suspend the Rules and Pass, as Amended\"\n$ vote_type        <chr> \"2/3 YEA-AND-NAY\"\n$ vote_result      <chr> \"Passed\"\n$ action_date      <chr> \"28-Jun-2021\"\n$ action_time      <chr> \"7:42 PM\"\n$ vote_desc        <chr> \"Global Health Security Act\"\n$ legislator_votes <list> [<tbl_df[430 x 7]>]\n$ party_votes      <list> [<tbl_df[3 x 5]>]\n```\n:::\n:::\n\n\nAnd we continue to stack this Russian doll of data from the legislator-level to the vote-level...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(recorded_votes_df = recorded_votes_df %>% \n  mutate(vote_roll = list(vote_roll_df))) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 8\n$ rollNumber     <chr> \"188\"\n$ url            <chr> \"https://clerk.house.gov/evs/2021/roll188.xml\"\n$ fullActionName <chr> \"Final Passage Under Suspension of the Rules Results\"\n$ chamber        <chr> \"House\"\n$ congress       <chr> \"117\"\n$ date           <chr> \"2021-06-28T23:46:02Z\"\n$ sessionNumber  <chr> \"1\"\n$ vote_roll      <list> [<tbl_df[1 x 14]>]\n```\n:::\n:::\n\n\n...all the way until we've gotten back to the bill-level. Now we have the bill-level characteristics with action and vote information nested in list columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_df$votes = list(recorded_votes_df)\n\nglimpse(bill_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 12\n$ billNumber                           <chr> \"391\"\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\"\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\"\n$ originChamber                        <chr> \"House\"\n$ billType                             <chr> \"HR\"\n$ introducedDate                       <chr> \"2021-01-21\"\n$ congress                             <chr> \"117\"\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\"\n$ actions                              <list> [<tbl_df[14 x 9]>]\n$ votes                                <list> [<tbl_df[1 x 8]>]\n```\n:::\n:::\n\n\nMeaning if we want to analyze the actions data, we simply have to `unnest()` it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunnest(bill_df, actions) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14\nColumns: 20\n$ billNumber                           <chr> \"391\", \"391\", \"391\", \"391\", \"391\"…\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\", \"2021-01-…\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\", \"2022-02-…\n$ originChamber                        <chr> \"House\", \"House\", \"House\", \"House…\n$ billType                             <chr> \"HR\", \"HR\", \"HR\", \"HR\", \"HR\", \"HR…\n$ introducedDate                       <chr> \"2021-01-21\", \"2021-01-21\", \"2021…\n$ congress                             <chr> \"117\", \"117\", \"117\", \"117\", \"117\"…\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\", \"1.0.0\", \"1.0.0\", \"1.0.0…\n$ action_date                          <date> 2021-07-12, 2021-06-28, 2021-06-…\n$ action_committee_system_code         <chr> \"ssfr00\", NA, NA, NA, NA, NA, NA,…\n$ action_committee_name                <chr> \"Foreign Relations Committee\", NA…\n$ action_source_code                   <chr> \"0\", \"2\", \"2\", \"9\", \"2\", \"2\", \"2\"…\n$ action_source_name                   <chr> \"Senate\", \"House floor actions\", …\n$ action_text                          <chr> \"Received in the Senate and Read …\n$ action_type                          <chr> \"IntroReferral\", \"Floor\", \"Floor\"…\n$ action_time                          <time>       NA, 19:46:03, 19:46:02, 19…\n$ action_code                          <chr> NA, \"H38310\", \"H37300\", \"8000\", \"…\n$ votes                                <list> [<tbl_df[1 x 8]>], [<tbl_df[1 x …\n```\n:::\n:::\n\n\nI'll stop there for brevity's sake, but you can find the code for extracting the full XML file [here](https://github.com/MokeEire/my-reps/blob/master/R/parsing_functions.R)[^7].\n\n[^7]: Ctrl/Cmd+F: `extract_bill_status`\n\n# TL;DR: Main Points\n\nProcessing XML documents can be simple depending on their structure, so try the simplest method if you can. If your data is making use of XML's flexibility you might but it can be boiled down to these steps:\n\n1.  **Explore the structure**\n\n> Go through any available documentation, and when you read in the XML file you can use functions like `xmlParse()`, `xml_structure()`, and `xml_contents()` .\n\n2.  **Define the output**\n\n> Consider what you want the output to look like and think about how it needs to be transformed to match this target.\n\n3.  **Process a single element** (write a function if it gets too complicated)\n\n> Get one element into the form you want. Writing functions can help you think through the data transformations being applied and make your code easier to read.\n\n4.  **Apply to all elements**\n\n> Focus on processing of the entire file (or the subset of the file you're interested in). You might want an XML file to return a single row, a single column, or a dataframe of size $n\\times k$. Once you have a single file returned in the format you want, you can combine the outputs of multiple files.\n\nPlease reach out with any questions or feedback! All is welcome, and there may even be a reward for anyone who finds a mistake in the code.\n\n\n\n\n\n# Other helpful articles\n\nHere are some of the helpful articles I came across in the course of writing this:\n\n-   [From XML to Excel for Data Analysis](https://towardsdatascience.com/from-xml-to-excel-for-data-analysis-ac0c0c765b7d \"Introduction to Processing XML In Python\")\n-   [Reading XML files in R](https://medium.com/geekculture/reading-xml-files-in-r-3122c3a2a8d9)\n\n# Session Info\n\nVersion information about R, OS, and loaded packages.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23 ucrt)\n os       Windows 10 x64 (build 19043)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Los_Angeles\n date     2022-07-27\n pandoc   2.18 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version   date (UTC) lib source\n assertthat    0.2.1     2019-03-21 [1] CRAN (R 4.2.0)\n backports     1.4.1     2021-12-13 [1] CRAN (R 4.2.0)\n bit           4.0.4     2020-08-04 [1] CRAN (R 4.2.0)\n bit64         4.0.5     2020-08-30 [1] CRAN (R 4.2.0)\n bitops        1.0-7     2021-04-24 [1] CRAN (R 4.2.0)\n broom         1.0.0     2022-07-01 [1] CRAN (R 4.2.1)\n cellranger    1.1.0     2016-07-27 [1] CRAN (R 4.2.0)\n cli           3.3.0     2022-04-25 [1] CRAN (R 4.2.0)\n colorspace    2.0-3     2022-02-21 [1] CRAN (R 4.2.0)\n crayon        1.5.1     2022-03-26 [1] CRAN (R 4.2.0)\n curl          4.3.2     2021-06-23 [1] CRAN (R 4.2.0)\n DBI           1.1.3     2022-06-18 [1] CRAN (R 4.2.0)\n dbplyr        2.2.1     2022-06-27 [1] CRAN (R 4.2.1)\n digest        0.6.29    2021-12-01 [1] CRAN (R 4.2.0)\n dplyr       * 1.0.9     2022-04-28 [1] CRAN (R 4.2.0)\n ellipsis      0.3.2     2021-04-29 [1] CRAN (R 4.2.0)\n evaluate      0.15      2022-02-18 [1] CRAN (R 4.2.0)\n extrafont   * 0.18      2022-04-12 [1] CRAN (R 4.2.0)\n extrafontdb   1.0       2012-06-11 [1] CRAN (R 4.2.0)\n fansi         1.0.3     2022-03-24 [1] CRAN (R 4.2.0)\n fastmap       1.1.0     2021-01-25 [1] CRAN (R 4.2.0)\n forcats     * 0.5.1     2021-01-27 [1] CRAN (R 4.2.0)\n fs            1.5.2     2021-12-08 [1] CRAN (R 4.2.0)\n generics      0.1.2     2022-01-31 [1] CRAN (R 4.2.0)\n ggplot2     * 3.3.6     2022-05-03 [1] CRAN (R 4.2.0)\n glue          1.6.2     2022-02-24 [1] CRAN (R 4.2.0)\n gtable        0.3.0     2019-03-25 [1] CRAN (R 4.2.0)\n haven         2.5.0     2022-04-15 [1] CRAN (R 4.2.0)\n hms           1.1.1     2021-09-26 [1] CRAN (R 4.2.0)\n htmltools     0.5.2     2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4     2021-09-08 [1] CRAN (R 4.2.0)\n httr          1.4.3     2022-05-04 [1] CRAN (R 4.2.0)\n janitor       2.1.0     2021-01-05 [1] CRAN (R 4.2.1)\n jsonlite    * 1.8.0     2022-02-22 [1] CRAN (R 4.2.0)\n knitr         1.39      2022-04-26 [1] CRAN (R 4.2.0)\n lifecycle     1.0.1     2021-09-24 [1] CRAN (R 4.2.0)\n log4r       * 0.4.2     2021-11-04 [1] CRAN (R 4.2.0)\n lubridate   * 1.8.0     2021-10-07 [1] CRAN (R 4.2.0)\n magrittr    * 2.0.3     2022-03-30 [1] CRAN (R 4.2.0)\n modelr        0.1.8     2020-05-19 [1] CRAN (R 4.2.0)\n mokeR       * 0.1.0     2022-07-16 [1] local\n munsell       0.5.0     2018-06-12 [1] CRAN (R 4.2.0)\n pillar        1.7.0     2022-02-01 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3     2019-09-22 [1] CRAN (R 4.2.0)\n purrr       * 0.3.4     2020-04-17 [1] CRAN (R 4.2.0)\n R6            2.5.1     2021-08-19 [1] CRAN (R 4.2.0)\n RCurl       * 1.98-1.7  2022-06-09 [1] CRAN (R 4.2.0)\n reactable   * 0.3.0     2022-05-26 [1] CRAN (R 4.2.0)\n reactR        0.4.4     2021-02-22 [1] CRAN (R 4.2.0)\n readr       * 2.1.2     2022-01-30 [1] CRAN (R 4.2.0)\n readxl        1.4.0     2022-03-28 [1] CRAN (R 4.2.0)\n reprex        2.0.1     2021-08-05 [1] CRAN (R 4.2.0)\n rjson       * 0.2.21    2022-01-09 [1] CRAN (R 4.2.0)\n rlang         1.0.4     2022-07-12 [1] CRAN (R 4.2.1)\n rmarkdown     2.14      2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.13      2020-11-12 [1] CRAN (R 4.2.0)\n Rttf2pt1      1.3.8     2020-01-10 [1] CRAN (R 4.2.1)\n rvest         1.0.2     2021-10-16 [1] CRAN (R 4.2.0)\n scales        1.2.0     2022-04-13 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2     2021-12-06 [1] CRAN (R 4.2.0)\n snakecase     0.11.0    2019-05-25 [1] CRAN (R 4.2.1)\n stringi       1.7.6     2021-11-29 [1] CRAN (R 4.2.0)\n stringr     * 1.4.0     2019-02-10 [1] CRAN (R 4.2.0)\n tibble      * 3.1.7     2022-05-03 [1] CRAN (R 4.2.0)\n tidyjson    * 0.3.1     2020-05-31 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.0     2022-02-01 [1] CRAN (R 4.2.0)\n tidyselect    1.1.2     2022-02-21 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.1     2021-04-15 [1] CRAN (R 4.2.0)\n tzdb          0.3.0     2022-03-28 [1] CRAN (R 4.2.0)\n utf8          1.2.2     2021-07-24 [1] CRAN (R 4.2.0)\n vctrs         0.4.1     2022-04-13 [1] CRAN (R 4.2.0)\n vroom         1.5.7     2021-11-30 [1] CRAN (R 4.2.0)\n withr         2.5.0     2022-03-03 [1] CRAN (R 4.2.0)\n xfun          0.31      2022-05-10 [1] CRAN (R 4.2.0)\n XML         * 3.99-0.10 2022-06-09 [1] CRAN (R 4.2.0)\n xml2        * 1.3.3     2021-11-30 [1] CRAN (R 4.2.0)\n yaml          2.3.5     2022-02-21 [1] CRAN (R 4.2.0)\n\n [1] C:/Users/Mark/AppData/Local/R/win-library/4.2\n [2] C:/Program Files/R/R-4.2.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "parse-legislative-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/core-js-2.5.3/shim.min.js\"></script>\r\n<script src=\"../site_libs/react-17.0.0/react.min.js\"></script>\r\n<script src=\"../site_libs/react-17.0.0/react-dom.min.js\"></script>\r\n<script src=\"../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\r\n<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/reactable-binding-0.3.0/reactable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}