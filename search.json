[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Mark Barrett",
    "section": "",
    "text": "I am an analyst with a passion for behavioural science, R, and public policy. This website is for building a data analytics and visualization portfolio, and writing about policy and my research process. My interests include decision-making, governance institutions, and information systems, and particularly areas where these topics coincide."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Mark Barrett",
    "section": "Education",
    "text": "Education\nLoyola Marymount University | Los Angeles, CA\nB.S in Economics & Psychology | Aug. 2012 - May 2016"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Mark Barrett",
    "section": "Experience",
    "text": "Experience\nRAND Corporation | Research Assistant | Apr. 2016 - Feb. 2020\nCBRE | Sr. Research Data Analyst | Mar. 2020 - May 2022\nKarl Storz | Sr. Business Analyst | June 2022 - present"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "25 min\n\n\n\n\n\n\nJul 14, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I’m Mark.",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\n\nUntangling congressional legislative data\n\n\n\n\n\n\nJul 14, 2022\n\n\n25 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/parse-xml/parse-xml.html#singular-elements",
    "href": "posts/parse-xml/parse-xml.html#singular-elements",
    "title": "Parsing XML with R",
    "section": "Singular elements",
    "text": "Singular elements\nIn the bookstore example, each of the book’s children were singular, which means they are well suited to be flattened into a dataframe. In the congressional data, we’ll need to single out the singular elements like billNumber and billType before converting to a dataframe. To do this, I find nodes which meet two criteria: 1) the node does not have any child elements, and 2) the node is not an empty string.\nxml_find_all() extracts nodes based on an XPath (XML Path Language) string and returns an {xml_nodeset} which can be coerced to a list using as_list(). As the function’s help file says, “XPath is like regular expressions for trees”. When writing an XPath expression, you are selecting the nodes which match the given pattern. In this case //bill/* selects all the child nodes in a bill node, while the text [ within the square brackets ] indexes these nodes to select those which have no children using the XPath function count and nodes which are not empty strings7.\n\nCodesingular_nodes = xml_find_all(\n  bill_xml, \n  \"//bill/*[count(./*) = 0 and not(string-length(.) = 0)]\"\n  )\n\n(singular_list = as_list(singular_nodes)) %>% \n  glimpse()\n\nList of 10\n $ :List of 1\n  ..$ : chr \"391\"\n $ :List of 1\n  ..$ : chr \"2021-01-22T08:12:10Z\"\n $ :List of 1\n  ..$ : chr \"2022-02-09T12:37:52Z\"\n $ :List of 1\n  ..$ : chr \"House\"\n $ :List of 1\n  ..$ : chr \"HR\"\n $ :List of 1\n  ..$ : chr \"2021-01-21\"\n $ :List of 1\n  ..$ : chr \"117\"\n $ :List of 1\n  ..$ : chr \"<pre>[Congressional Record Volume 167, Number 17 (Thursday, January 28, 2021)][House]From the Congressional Rec\"| __truncated__\n $ :List of 1\n  ..$ : chr \"Global Health Security Act of 2021\"\n $ :List of 1\n  ..$ : chr \"1.0.0\"\n\n\nNote that we didn’t retain the element names so we need to assign them ourselves. When your data is in a named list, you can flatten each element in the list into a dataframe column using purrr’s flatten_dfc() .\n\nCodesingular_list_named = setNames(singular_list, \n                                xml_name(singular_nodes))\n\n(bill_df = flatten_dfc(singular_list_named)) %>% \n  glimpse()\n\nRows: 1\nColumns: 10\n$ billNumber                           <chr> \"391\"\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\"\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\"\n$ originChamber                        <chr> \"House\"\n$ billType                             <chr> \"HR\"\n$ introducedDate                       <chr> \"2021-01-21\"\n$ congress                             <chr> \"117\"\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\""
  },
  {
    "objectID": "posts/parse-xml/parse-xml.html#nested-elements",
    "href": "posts/parse-xml/parse-xml.html#nested-elements",
    "title": "Parsing XML with R",
    "section": "Nested elements",
    "text": "Nested elements\nIt’s nice when things are simple, but often times they’re not. In congressional data, three such cases are: elements with multiple children, elements with multiple children with their own sub-elements, and elements with nested XML data.\nwe might want to know what happened to the bill over time – when it was introduced, voted on, and/or passed. Each of these could be represented as a column representing the date of the action like introducedDate, but this becomes unruly as the different action types and characteristics increase. Below is an example of an individual action element.\n\nCode(actions_xml = xml_find_all(bill_node, \"actions/item\"))\n\n{xml_nodeset (14)}\n [1] <item>\\n  <actionDate>2021-07-12</actionDate>\\n  <committees>\\n    <item ...\n [2] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:03</a ...\n [3] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:02</a ...\n [4] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:46:02</a ...\n [5] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>19:24:39</a ...\n [6] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:20:02</a ...\n [7] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:31</a ...\n [8] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:26</a ...\n [9] <item>\\n  <actionDate>2021-06-28</actionDate>\\n  <actionTime>15:05:13</a ...\n[10] <item>\\n  <actionDate>2021-03-25</actionDate>\\n  <committees>\\n    <item ...\n[11] <item>\\n  <actionDate>2021-03-25</actionDate>\\n  <committees>\\n    <item ...\n[12] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Refer ...\n[13] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Intro ...\n[14] <item>\\n  <actionDate>2021-01-21</actionDate>\\n  <links/>\\n  <text>Intro ...\n\nCode# Look at first action\nxml_contents(actions_xml[1])\n\n{xml_nodeset (6)}\n[1] <actionDate>2021-07-12</actionDate>\n[2] <committees>\\n  <item>\\n    <systemCode>ssfr00</systemCode>\\n    <name>Fo ...\n[3] <links/>\n[4] <sourceSystem>\\n  <code>0</code>\\n  <name>Senate</name>\\n</sourceSystem>\n[5] <text>Received in the Senate and Read twice and referred to the Committee ...\n[6] <type>IntroReferral</type>\n\n\nTo include actions and votes, we use the same steps as before and nest them in a list column such that each row will have a nested dataframe. This strategy takes advantage of the nest()/unnest() functionality of tidyr. For more complex cases like this, I would implore you to write functions8. Functions can make your code more reliable, easier to debug, and they make you think critically about how you are handling data.\nMultiple children\nMultiple children with sub-elements\nThe actions node has an <item> child node for each congressional action taken for a bill, such as being introduced, sent to a committee, debated on the floor, etc.. Just as before, we use as_list() to convert the {xml_nodeset} to a list.\n\nCodeactions_list = as_list(actions_xml)\n\n# Look at first action\nglimpse(actions_list[[1]])\n\nList of 6\n $ actionDate  :List of 1\n  ..$ : chr \"2021-07-12\"\n $ committees  :List of 1\n  ..$ item:List of 2\n  .. ..$ systemCode:List of 1\n  .. ..$ name      :List of 1\n $ links       : list()\n $ sourceSystem:List of 2\n  ..$ code:List of 1\n  .. ..$ : chr \"0\"\n  ..$ name:List of 1\n  .. ..$ : chr \"Senate\"\n $ text        :List of 1\n  ..$ : chr \"Received in the Senate and Read twice and referred to the Committee on Foreign Relations.\"\n $ type        :List of 1\n  ..$ : chr \"IntroReferral\"\n\n\nIn the individual action container, we can see we have the type, text, and date of the action, a list of committees related to the action, and some elements which are singular and some which are not. To deal with this, we can write a function (or set of functions) like the ones below to process an action.\n\nFunctions# Helper function: flatten_dfc_rename\n# flatten a list to dataframe and \n# rename the columns with a given prefix\nflatten_dfc_rename = function(list_to_flatten, \n                          name_prefix = \"prefix\"){\n  rename_with(\n    .data = flatten_dfc(list_to_flatten), \n    .fn = ~str_c(name_prefix, \"_\", .),\n    # Exclude columns which already start with the prefix\n    .cols = -starts_with(name_prefix)\n    )\n}\n\n# Function: parse_action\n# Parse actions from list to dataframe\nparse_action = function(action){\n  action %>% \n    # Flatten+rename sourceSystem elements\n    map_at(\"sourceSystem\", ~flatten_dfc_rename(.x, \"source\")) %>% \n    # Flatten+rename committees\n    map_at(\"committees\", function(committee){\n      map_dfr(committee, ~flatten_dfc_rename(.x, \"committee\"))\n    }) %>% \n    # Flatten object to dataframe\n    flatten_dfc_rename(., \"action\") %>% \n    # Lastly, clean the names\n    janitor::clean_names()\n}\n\n# Parse the first action\nparse_action(actions_list[[1]]) %>% \n  glimpse()\n\nRows: 1\nColumns: 7\n$ action_date                  <chr> \"2021-07-12\"\n$ action_committee_system_code <chr> \"ssfr00\"\n$ action_committee_name        <chr> \"Foreign Relations Committee\"\n$ action_source_code           <chr> \"0\"\n$ action_source_name           <chr> \"Senate\"\n$ action_text                  <chr> \"Received in the Senate and Read twice an…\n$ action_type                  <chr> \"IntroReferral\"\n\n\nUsing the purrr library’s map_dfr(), we apply this function to each action and combine the results into dataframe rows. It is useful to be explicit about the data types when you plan to combine rows into a dataframe or unnest() the data in the future. I do this using type_convert() to ensure the columns have a specific datatype. To add these actions data as a list column to bill_df we can simply use dollar assignment.\n\nCodeactions_df = map_dfr(actions_list, parse_action)\n\n(actions_df = type_convert(actions_df,\n                          col_types = cols(\n                            action_date = col_date(), \n                            action_time = col_time(),\n                            action_committee_systemCode = col_character(), \n                            action_committee_name = col_character(), \n                            action_source_code = col_character(),\n                            action_source_name = col_character(),\n                            action_text = col_character(), \n                            action_type = col_character(), \n                            action_code = col_character()\n                            )\n                          ))\n\n# A tibble: 14 × 9\n   action_date action_committee_system_code action_committee_n… action_source_c…\n   <date>      <chr>                        <chr>               <chr>           \n 1 2021-07-12  ssfr00                       Foreign Relations … 0               \n 2 2021-06-28  <NA>                         <NA>                2               \n 3 2021-06-28  <NA>                         <NA>                2               \n 4 2021-06-28  <NA>                         <NA>                9               \n 5 2021-06-28  <NA>                         <NA>                2               \n 6 2021-06-28  <NA>                         <NA>                2               \n 7 2021-06-28  <NA>                         <NA>                2               \n 8 2021-06-28  <NA>                         <NA>                2               \n 9 2021-06-28  <NA>                         <NA>                2               \n10 2021-03-25  hsfa00                       Foreign Affairs Co… 1               \n11 2021-03-25  hsfa00                       Foreign Affairs Co… 1               \n12 2021-01-21  hsfa00                       Foreign Affairs Co… 2               \n13 2021-01-21  <NA>                         <NA>                9               \n14 2021-01-21  <NA>                         <NA>                9               \n# … with 5 more variables: action_source_name <chr>, action_text <chr>,\n#   action_type <chr>, action_time <time>, action_code <chr>\n\nCodebill_df$actions = list(actions_df)\n\n\nNested XML\nVotes are particularly interesting because it provides a more discrete measure of our representatives’ behaviour. Individual votes are stored in the <recordedVotes> container. We can access child elements in XML using a forward slash (this uses a language called XPATH).\n\nCode(bill_recorded_vote_nodes = xml_find_all(bill_node, \"recordedVotes/recordedVote\")) %>% \n  xml_contents()\n\n{xml_nodeset (7)}\n[1] <rollNumber>188</rollNumber>\n[2] <url>https://clerk.house.gov/evs/2021/roll188.xml</url>\n[3] <fullActionName>Final Passage Under Suspension of the Rules Results</full ...\n[4] <chamber>House</chamber>\n[5] <congress>117</congress>\n[6] <date>2021-06-28T23:46:02Z</date>\n[7] <sessionNumber>1</sessionNumber>\n\n\nYou may have spotted why votes are interesting elements to parse because inside the <url> element we find another XML file!9 Before we dive into that can of worms, I’ll convert the top-level nodes to a list and flatten it into columns. Note we use map_dfr() with votes_list because there could be multiple vote objects.\n\nCode# Coerce nodes to list\nrecorded_votes_list = as_list(bill_recorded_vote_nodes)\n\n(recorded_votes_df = map_dfr(recorded_votes_list, flatten_dfc)) %>% \n  glimpse()\n\nRows: 1\nColumns: 7\n$ rollNumber     <chr> \"188\"\n$ url            <chr> \"https://clerk.house.gov/evs/2021/roll188.xml\"\n$ fullActionName <chr> \"Final Passage Under Suspension of the Rules Results\"\n$ chamber        <chr> \"House\"\n$ congress       <chr> \"117\"\n$ date           <chr> \"2021-06-28T23:46:02Z\"\n$ sessionNumber  <chr> \"1\"\n\n\nNow we want to get the vote roll XML file, so we go back to read_xml() . There are two main nodes - <vote-metadata> and <vote-data>. One node contains the aggregated vote information, while <vote-data> contains the legislator-level vote data. Let’s try to parse the legislator-level data first. Here is the XML for a single legislator’s vote:\n\nCodevote_roll_xml = read_xml(recorded_votes_df$url)\n\nvote_data = xml_find_all(vote_roll_xml, \"vote-data\")\n\nxml_child(vote_data)\n\n{xml_node}\n<recorded-vote>\n[1] <legislator name-id=\"A000370\" sort-field=\"Adams\" unaccented-name=\"Adams\"  ...\n[2] <vote>Yea</vote>\n\nCode# (vote_roll_children = xml_children(vote_roll_xml)) %>% \n#   map(xml_contents)\n\n\nWith a similar combination of as_list() , flatten_dfr(), and unnest() we can flatten the XML into one row per legislator but we lose all the attributes.\n\nCode(vote_roll_flattened = vote_data %>% \n  as_list() %>% \n  flatten_dfr() %>% \n    unnest(everything()))\n\n# A tibble: 430 × 2\n   legislator  vote \n   <chr>       <chr>\n 1 Adams       Yea  \n 2 Aderholt    Nay  \n 3 Aguilar     Yea  \n 4 Allen       Nay  \n 5 Allred      Yea  \n 6 Amodei      Yea  \n 7 Armstrong   Yea  \n 8 Arrington   Nay  \n 9 Auchincloss Yea  \n10 Axne        Yea  \n# … with 420 more rows\n\n\nInstead we’ll need to extract the attributes before we flatten the data. Let’s take another look at the legislators structure.\n\nCodevote_legislators = vote_data %>% \n  xml_find_all(\"recorded-vote\")\n\n(legislators_list = as_list(vote_legislators))[1] %>% \n  glimpse()\n\nList of 1\n $ :List of 2\n  ..$ legislator:List of 1\n  .. ..$ : chr \"Adams\"\n  .. ..- attr(*, \"name-id\")= chr \"A000370\"\n  .. ..- attr(*, \"sort-field\")= chr \"Adams\"\n  .. ..- attr(*, \"unaccented-name\")= chr \"Adams\"\n  .. ..- attr(*, \"party\")= chr \"D\"\n  .. ..- attr(*, \"state\")= chr \"NC\"\n  .. ..- attr(*, \"role\")= chr \"legislator\"\n  ..$ vote      :List of 1\n  .. ..$ : chr \"Yea\"\n\n\nThe legislator element has all the attributes, while the vote element only has a value. We want to extract the attributes only for legislator using map() to apply map_at() on each legislator element and extract the attributes from each while retaining the value in vote. It can often feel like you’re getting lost in a list of lists, but with some experimentation you’ll be able to find your way back to the surface.\n\nCode(legislator_vote_df = legislators_list %>% \n    # Modify one level deeper using map_at to target legislator elements\n    map(map_at, \"legislator\", attributes) %>% \n    map_dfr(flatten_dfc))\n\n# A tibble: 430 × 7\n   `name-id` `sort-field` `unaccented-name` party state role       vote \n   <chr>     <chr>        <chr>             <chr> <chr> <chr>      <chr>\n 1 A000370   Adams        Adams             D     NC    legislator Yea  \n 2 A000055   Aderholt     Aderholt          R     AL    legislator Nay  \n 3 A000371   Aguilar      Aguilar           D     CA    legislator Yea  \n 4 A000372   Allen        Allen             R     GA    legislator Nay  \n 5 A000376   Allred       Allred            D     TX    legislator Yea  \n 6 A000369   Amodei       Amodei            R     NV    legislator Yea  \n 7 A000377   Armstrong    Armstrong         R     ND    legislator Yea  \n 8 A000375   Arrington    Arrington         R     TX    legislator Nay  \n 9 A000148   Auchincloss  Auchincloss       D     MA    legislator Yea  \n10 A000378   Axne         Axne              D     IA    legislator Yea  \n# … with 420 more rows\n\n\nNow we have a table of legislator voting data! But what about the <vote-metadata>? Everything other than the <vote-totals> element is singular so we can get that out of the way the same way as before:\n\nCodevote_metadata = xml_find_all(vote_roll_xml, \"vote-metadata\")\n\nvote_singular_nodes = xml_singular_nodes(vote_metadata)\n\n(vote_df = as_list(vote_singular_nodes) %>% \n  # as_list() doesn't retain element names so we set names ourselves\n  setNames(xml_name(vote_singular_nodes)) %>% \n  flatten_dfc()) %>% \n  glimpse()\n\nRows: 1\nColumns: 12\n$ majority        <chr> \"D\"\n$ congress        <chr> \"117\"\n$ session         <chr> \"1st\"\n$ chamber         <chr> \"U.S. House of Representatives\"\n$ `rollcall-num`  <chr> \"188\"\n$ `legis-num`     <chr> \"H R 391\"\n$ `vote-question` <chr> \"On Motion to Suspend the Rules and Pass, as Amended\"\n$ `vote-type`     <chr> \"2/3 YEA-AND-NAY\"\n$ `vote-result`   <chr> \"Passed\"\n$ `action-date`   <chr> \"28-Jun-2021\"\n$ `action-time`   <chr> \"7:42 PM\"\n$ `vote-desc`     <chr> \"Global Health Security Act\"\n\n\nThe <vote-totals> are a bit of a unique little element, with 3 different types of nodes. This is another opportunity for us to be choosy with our data. The first node is table headers, which we don’t need because the elements are tagged anyway. From these, we really only need the <totals-by-party> nodes as long as the totals of which agree with <totals-by-vote> , which is worth checking.\n\nCode(vote_totals = xml_find_all(vote_metadata, \"vote-totals\")) %>% \n  xml_contents()\n(vote_totals_by_party = xml_find_all(vote_totals, \"totals-by-party\"))\n(totals_by_vote = xml_find_all(vote_totals, \"totals-by-vote\")) %>% \n  xml_contents()\n\n\n\n{xml_nodeset (5)}\n[1] <totals-by-party-header>\\n  <party-header>Party</party-header>\\n  <yea-he ...\n[2] <totals-by-party>\\n  <party>Republican</party>\\n  <yea-total>90</yea-tota ...\n[3] <totals-by-party>\\n  <party>Democratic</party>\\n  <yea-total>217</yea-tot ...\n[4] <totals-by-party>\\n  <party>Independent</party>\\n  <yea-total>0</yea-tota ...\n[5] <totals-by-vote>\\n  <total-stub>Totals</total-stub>\\n  <yea-total>307</ye ...\n\n\n{xml_nodeset (3)}\n[1] <totals-by-party>\\n  <party>Republican</party>\\n  <yea-total>90</yea-tota ...\n[2] <totals-by-party>\\n  <party>Democratic</party>\\n  <yea-total>217</yea-tot ...\n[3] <totals-by-party>\\n  <party>Independent</party>\\n  <yea-total>0</yea-tota ...\n\n\n{xml_nodeset (5)}\n[1] <total-stub>Totals</total-stub>\n[2] <yea-total>307</yea-total>\n[3] <nay-total>112</nay-total>\n[4] <present-total>0</present-total>\n[5] <not-voting-total>11</not-voting-total>\n\n\n\n\nOnce we have our nodeset (which at last are all singular), we use same listing, mapping, and flattening…or lappening as absolutely no one calls it.\n\nCode(party_vote_totals_df = as_list(vote_totals_by_party) %>% \n  map_dfr(flatten_dfc) %>% \n    type_convert())\n\n# A tibble: 3 × 5\n  party       `yea-total` `nay-total` `present-total` `not-voting-total`\n  <chr>             <dbl>       <dbl>           <dbl>              <dbl>\n1 Republican           90         112               0                  9\n2 Democratic          217           0               0                  2\n3 Independent           0           0               0                  0\n\n\nNow that we have all of our vote data wrangled from the thorny grasp of XML, we can put it all together.\n\nCodevote_roll_df = vote_df %>% \n  mutate(legislator_votes = list(legislator_vote_df),\n         party_votes = list(party_vote_totals_df)) %>% \n    janitor::clean_names()\n\n(recorded_votes_df = recorded_votes_df %>% \n  mutate(vote_roll = list(vote_roll_df))) %>% \n  glimpse()\n\nRows: 1\nColumns: 8\n$ rollNumber     <chr> \"188\"\n$ url            <chr> \"https://clerk.house.gov/evs/2021/roll188.xml\"\n$ fullActionName <chr> \"Final Passage Under Suspension of the Rules Results\"\n$ chamber        <chr> \"House\"\n$ congress       <chr> \"117\"\n$ date           <chr> \"2021-06-28T23:46:02Z\"\n$ sessionNumber  <chr> \"1\"\n$ vote_roll      <list> [<tbl_df[1 x 14]>]\n\n\n…all the way until we’ve gotten back to the bill-level. Now we have the bill-level characteristics with action and vote information nested in list columns. If we want to analyze the actions data, we simply have to unnest() it.\n\nCodebill_df$votes = list(recorded_votes_df)\n\nunnest(bill_df, actions) %>% \n  glimpse()\n\nRows: 14\nColumns: 20\n$ billNumber                           <chr> \"391\", \"391\", \"391\", \"391\", \"391\"…\n$ createDate                           <chr> \"2021-01-22T08:12:10Z\", \"2021-01-…\n$ updateDate                           <chr> \"2022-02-09T12:37:52Z\", \"2022-02-…\n$ originChamber                        <chr> \"House\", \"House\", \"House\", \"House…\n$ billType                             <chr> \"HR\", \"HR\", \"HR\", \"HR\", \"HR\", \"HR…\n$ introducedDate                       <chr> \"2021-01-21\", \"2021-01-21\", \"2021…\n$ congress                             <chr> \"117\", \"117\", \"117\", \"117\", \"117\"…\n$ constitutionalAuthorityStatementText <chr> \"<pre>[Congressional Record Volum…\n$ title                                <chr> \"Global Health Security Act of 20…\n$ version                              <chr> \"1.0.0\", \"1.0.0\", \"1.0.0\", \"1.0.0…\n$ action_date                          <date> 2021-07-12, 2021-06-28, 2021-06-…\n$ action_committee_system_code         <chr> \"ssfr00\", NA, NA, NA, NA, NA, NA,…\n$ action_committee_name                <chr> \"Foreign Relations Committee\", NA…\n$ action_source_code                   <chr> \"0\", \"2\", \"2\", \"9\", \"2\", \"2\", \"2\"…\n$ action_source_name                   <chr> \"Senate\", \"House floor actions\", …\n$ action_text                          <chr> \"Received in the Senate and Read …\n$ action_type                          <chr> \"IntroReferral\", \"Floor\", \"Floor\"…\n$ action_time                          <time>       NA, 19:46:03, 19:46:02, 19…\n$ action_code                          <chr> NA, \"H38310\", \"H37300\", \"8000\", \"…\n$ votes                                <list> [<tbl_df[1 x 8]>], [<tbl_df[1 x …\n\n\nI’ll stop there for brevity’s sake, but you can find the code for extracting the full XML file here10."
  }
]